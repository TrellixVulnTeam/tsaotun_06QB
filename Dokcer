#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import absolute_import

import sys
import optparse

from lib.Docker.docker_client import Docker
from docker.errors import APIError

from lib.Utils import *

class switch(object):

    def __init__(self, value):
        self.value = value
        self.fall = False

    def __iter__(self):
        """Return the match method once, then stop"""
        yield self.match
        raise StopIteration

    def match(self, *args):
        """Indicate whether or not to enter a case suite"""
        if self.fall or not args:
            return True
        elif self.value in args:
            self.fall = True
            return True
        else:
            return False


def enter_shell(dokcer_instance):
    sA = shellAgent()
    logger.Logger.logInfo("Dokcer ready (press Ctrl+D to end input)")
    while True:
        result = dokcer_instance.parse(sA.prompt())
        if result == "CTRL+D":
            logger.Logger.logInfo("[INFO] CTRL+D captured. Exit.")
            raise RuntimeError
        elif result is not None:
            logger.Logger.logSuccess(result)
        else:
            logger.Logger.logError("Unreconized keyword!")


class Dokcer(object):
    command_list = []

    def __init__(self, available_commands=[]):
        self.docker = Docker()
        self.available_commands = available_commands


    def setCommand(self, command):
        self.command_list.append(command)

    
    def eval(self):
        while len(self.command_list) > 0:
            command = self.command_list.pop()
            self.docker.load(command)
        else:
            logger.Logger.logSuccess(self.docker.recv())

if __name__ == "__main__":
    try:
        dokcer = Dokcer(available_commands = ["run", "ps"])
        for case in switch(sys.argv[1]):
            if case('run'):
                dokcer.setCommand('run')
                break
            if case('ps'):
                dokcer.setCommand('ps')
                break

        usage = "usage: %prog [options]"
        p = option_parser.OptionParser(usage=usage, version="Dokcer v0.1", available_commands = ["run", "ps"])
        p.add_option('--console', '-c',
                     action="store_true", metavar='CONSOLE',
                     help="Enter console mode")
        p.add_option('--color',
                     action="store_true", dest="color",
                     help="Set terminal color")
        p.add_option('--verbose', '-v',
                     action="store_true", dest="verbosity", metavar='LEVEL',
                     help="Set verbosity level")
        group = optparse.OptionGroup(
            p, 'Docker commands', 'Following commands are identical to Docker!')
        group.add_option('run',
                         action="store", dest="command", metavar='RUN',
                         help="Run a command in a new container")
        group.add_option('ps',
                         action="store", dest="command", metavar='PS',
                         help="List containers")
        p.add_option_group(group)
        options, arguments = p.parse_args()

        if options.console:
            enter_shell(dokcer)
        else:
            if options.color:
                dokcer.setColor()

            if options.verbosity:
                dokcer.setVerbose()

        dokcer.command_list.append("")
        dokcer.eval()
    except option_parser.OptionParsingError, e:
        logger.Logger.logError('dokcer: {}'.format(e.msg[2:]))
    except option_parser.OptionParsingExit, e:
        logger.Logger.logError(e.status)
    except (KeyboardInterrupt, SystemExit):
        pass
    except RuntimeError:
        pass
    