#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import absolute_import

import argparse

from lib.Docker.docker_client import Docker
from lib.Utils import logger

def enter_shell(dokcer_instance):
    """Enter Dokcer shell"""
    sA = shellAgent()
    logger.Logger.logInfo("Dokcer ready (press Ctrl+D to end input)")
    while True:
        result = dokcer_instance.parse(sA.prompt())
        if result == "CTRL+D":
            logger.Logger.logInfo("[INFO] CTRL+D captured. Exit.")
            raise RuntimeError
        elif result is not None:
            logger.Logger.logSuccess(result)
        else:
            logger.Logger.logError("Unreconized keyword!")


class Dokcer(object):
    """Entrypoint of Dokcer"""
    color = 0
    level = 0
    verbose = 0

    def __init__(self):
        self.docker = Docker()

    def set_color(self):
        """Set terminal color"""
        self.color = 1

    def set_verbose(self, level):
        """Set verbosity level"""
        self.verbose = min(level, 3)

    def eval(self, args):
        """Evaluate commands"""

        del args["console"]
        del args["color"]
        del args["verbosity"]
        del args["func"]

        self.docker.load(args)
        if self.color:
            logger.Logger.logSuccess(self.docker.recv())
        else:
            logger.Logger.log(self.docker.recv())

if __name__ == "__main__":
    try:
        dokcer = Dokcer()
        p = argparse.ArgumentParser(description='Dokcer v0.1')
        p.add_argument('--console', '-c',
                       action="store_true",
                       help="Enter console mode")
        p.add_argument('--color',
                       action="store_true", dest="color",
                       help="Set terminal color")
        p.add_argument('--verbose', '-v',
                       action="count", dest="verbosity", default=0,
                       help="Set verbosity level")

        sp = p.add_subparsers(
            title="Commands", dest="command", help='additional help')

        run = sp.add_parser('run')
        run.add_argument('-p',
                         metavar="PORT[:PORT]",
                         help="Specify Ports")
        run.set_defaults(func=dokcer.eval)

        ps = sp.add_parser('ps')
        ps.add_argument('-a',
                        action="store_true",
                        help="List all containers")
        ps.set_defaults(func=dokcer.eval)

        arguments = p.parse_args()
        arguments = vars(arguments)

        if arguments["console"]:
            enter_shell(dokcer)
        else:
            dokcer.set_verbose(arguments["verbosity"])
            if arguments["color"]:
                dokcer.set_color()

        arguments["func"](arguments)

        print repr(arguments)
        raw_input()
    except (KeyboardInterrupt, SystemExit):
        pass
    except RuntimeError:
        pass
