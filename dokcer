#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import absolute_import

import argparse
from docker.errors import APIError

from lib.Docker.docker_client import Docker
from lib.Utils import logger


def enter_shell(dokcer_instance):
    """Enter Dokcer shell"""
    sA = shellAgent()
    logger.Logger.logInfo("Dokcer ready (press Ctrl+D to end input)")
    while True:
        result = dokcer_instance.parse(sA.prompt())
        if result == "CTRL+D":
            logger.Logger.logInfo("[INFO] CTRL+D captured. Exit.")
            raise RuntimeError
        elif result is not None:
            logger.Logger.logSuccess(result)
        else:
            logger.Logger.logError("Unreconized keyword!")


class Dokcer(object):
    """Entrypoint of Dokcer"""
    color = 0
    debug = 0
    dry = 0
    level = 0
    verbose = 0

    def __init__(self):
        self.docker = Docker()

    def set_color(self):
        """Set terminal color"""
        self.color = 1

    def set_debug(self):
        """DEBUG on/off"""
        self.debug = 1

    def set_dry(self):
        """dry-run on/off"""
        self.dry = 1

    def set_verbose(self, level):
        """Set verbosity level"""
        self.verbose = min(level, 3)

    def eval(self, args):
        """Evaluate commands"""
        try:
            del args["console"]
            del args["color"]
            del args["debug"]
            del args["dry"]
            del args["verbosity"]
        except KeyError:
            self.docker.load(args)
            return self.docker.recv()["Version"]  # docker --version

        if self.dry:
            self.docker.dry()
        else:
            self.docker.load(args)
        if self.color:
            logger.Logger.logSuccess(self.docker.recv())
        else:
            logger.Logger.log(self.docker.recv())

if __name__ == "__main__":
    try:
        dokcer = Dokcer()
        # -------------------------START------------------------------
        p = argparse.ArgumentParser()
        p.add_argument('--console', '-c',
                       action="store_true",
                       help="Enter console mode")
        p.add_argument('--color',
                       action="store_true",
                       help="Set terminal color")
        p.add_argument('--debug',
                       action="store_true",
                       help="DEBUG on/off")
        p.add_argument('--dry',
                       action="store_true",
                       help="dry-run on/off")
        p.add_argument('--verbose', '-v',
                       action="count", dest="verbosity", default=0,
                       help="Set verbosity level")
        p.add_argument('--version',
                       action="version",
                       version="%(prog)s v0.1 with: Docker {}".format(dokcer.eval({"command_flag": "version"})))

        # ------------------------------------------------------------

        sp = p.add_subparsers(
            title="Commands", dest="command_flag", help='additional help')

        # ---------------------------RUN------------------------------

        run = sp.add_parser('run')
        run.add_argument('image',
                         type=str,
                         metavar="IMAGE",
                         nargs=1,
                         help="Image to run")
        run.add_argument('command',
                         type=str,
                         metavar="COMMAND",
                         nargs="*",
                         help="Commands to run")
        run.add_argument('--detach', '-d',
                         action="store_true",
                         dest="detach",
                         help="Run container in background and print container ID")
        run.add_argument('--publish', '-p',
                         type=str,
                         metavar="PORT[:PORT]",
                         dest="port_bindings",
                         help="Specify ports")
        run.add_argument('--interactive', '-i',
                         action="store_true",
                         dest="stdin_open",
                         help="Keep STDIN open even if not attached")
        run.add_argument('--tty', '-t',
                         action="store_true",
                         dest="tty",
                         help="Allocate a pseudo-TTY")

        # --------------------------EXEC------------------------------

        exec_d = sp.add_parser('exec')
        exec_d.add_argument('cmd',
                            type=str,
                            metavar="COMMAND",
                            nargs="+",
                            help="Commands to run")
        exec_d.add_argument('--detach', '-d',
                            action="store_true",
                            dest="detach",
                            help="Detached mode: run command in the background")
        exec_d.add_argument('--interactive', '-i',
                            action="store_true",
                            dest="stdin_open",
                            help="Keep STDIN open even if not attached")
        exec_d.add_argument('--tty', '-t',
                            action="store_true",
                            dest="tty",
                            help="Allocate a pseudo-TTY")

        # ---------------------------RM-------------------------------

        rm = sp.add_parser('rm')
        rm.add_argument('container',
                        type=str,
                        metavar="IMAGE ID (0 means last created container)",
                        nargs="?",
                        help="Container to remove")
        rm.add_argument('--force', '-f',
                        action="store_true",
                        dest="force",
                        help="Force the removal of a running container (uses SIGKILL)")

        # ---------------------------PS-------------------------------

        ps = sp.add_parser('ps')
        ps.add_argument('--all', '-a',
                        action="store_true",
                        dest="all",
                        help="Show all containers (default shows just running)")
        ps.add_argument('--filter', '-f',
                        type=dict,
                        dest="filters",
                        help="Filter output based on conditions provided (default [])")
        ps.add_argument('--format',
                        type=str,
                        help="Pretty-print containers using a Python template")
        ps.add_argument('--quiet', '-q',
                        action="store_true",
                        help="Only display numeric IDs")

        # ---------------------------END------------------------------

        arguments = p.parse_args()
        arguments = vars(arguments)

        if arguments["console"]:
            enter_shell(dokcer)
        else:
            dokcer.set_verbose(arguments["verbosity"])
            if arguments["color"]:
                dokcer.set_color()
            if arguments["debug"]:
                dokcer.set_debug()
            if arguments["dry"]:
                dokcer.set_dry()

        dokcer.eval(arguments)

        if dokcer.debug:
            print repr(arguments)
    except (KeyboardInterrupt, SystemExit):
        pass
    except APIError as e:
        if dokcer.color:
            logger.Logger.logError(str(e.explanation))
        else:
            logger.Logger.log(str(e.explanation))
        exit(1)
