#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
# -*- coding: utf-8 -*-

from __future__ import absolute_import

import argparse
import textwrap
import argcomplete
from docker.errors import APIError

from lib.Docker.docker_client import Docker
from lib.Utils import logger


class Dokcer(object):
    """Entrypoint of Dokcer"""
    color = 0
    debug = 0
    dry = 0
    level = 0
    verbose = 0
    remove = False

    def __init__(self):
        self.docker = Docker()

    def set_color(self):
        """Set terminal color"""
        self.color = 1

    def set_debug(self):
        """DEBUG on/off"""
        self.debug = 1

    def set_dry(self):
        """dry-run on/off"""
        self.dry = 1

    def set_verbose(self, level):
        """Set verbosity level"""
        self.verbose = min(level, 3)

    def eval(self, args, suppress=False):
        """Evaluate commands"""
        try:
            command_flag = args["command_flag"]
            del args["console"]
            del args["color"]
            del args["debug"]
            del args["dry"]
            del args["verbosity"]
            if (command_flag == "run") and ("rm" in args):
                self.remove = args["rm"]
                del args["rm"]
            else:
                self.remove = False
        except KeyError:
            self.docker.load(args)
            return self.docker.recv()  # docker --version

        if self.dry:
            self.docker.dry()
        else:
            self.docker.load(args)
            if self.remove:
                self.docker.client.remove_container(
                    self.docker.recv()["create"]["Id"], force=True)
            if command_flag == "run":
                self.docker.set_recv(self.docker.recv()["run"])
        if suppress is not True:
            if self.color:
                logger.Logger.logSuccess("{}", self.docker.recv())
            else:
                logger.Logger.log("{}", self.docker.recv())

if __name__ == "__main__":
    version = None
    exec(open('version.py').read())
    try:
        dokcer = Dokcer()
        # -------------------------START------------------------------
        p = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter)
        p.add_argument('--console', '-c',
                       action="store_true",
                       help="enter console mode")
        p.add_argument('--color',
                       action="store_true",
                       help="set terminal color")
        p.add_argument('--debug',
                       action="store_true",
                       help="debug on/off")
        p.add_argument('--dry',
                       action="store_true",
                       help="dry-run on/off")
        p.add_argument('--verbose', '-v',
                       action="count", dest="verbosity", default=0,
                       help="set verbosity level")
        p.add_argument('--version',
                       action="version",
                       version="%(prog)s {} with:\n{}\n".format(version, dokcer.eval({"command_flag": "version"})))

        # ------------------------------------------------------------

        sp = p.add_subparsers(
            title="Commands", dest="command_flag", help='type [COMMAND] --help to get additional help')

        # --------------------------VERSION--------------------------

        version = sp.add_parser('version')
        version.add_argument('--format',
                             type=str,
                             help="Pretty-print containers using a Python template")

        # ---------------------------INFO----------------------------

        info = sp.add_parser('info')

        # --------------------------IMAGES----------------------------

        images = sp.add_parser('images')
        images.add_argument('--all', '-a',
                            action="store_true",
                            dest="all",
                            help="Show all images (default hides intermediate images)")
        images.add_argument('--filter', '-f',
                            type=dict,
                            dest="filters",
                            help="Filter output based on conditions provided")
        images.add_argument('--format',
                            type=str,
                            help="Pretty-print containers using a Python template")
        images.add_argument('--quiet', '-q',
                            action="store_true",
                            help="Only show numeric IDs")

        # ---------------------------PULL------------------------------

        pull = sp.add_parser('pull')
        pull.add_argument('image',
                          type=str,
                          metavar="IMAGE",
                          nargs=1,
                          help="Pull an image or a repository from a registry")

        # ---------------------------BUILD-----------------------------

        build = sp.add_parser('build',
                              formatter_class=argparse.RawDescriptionHelpFormatter,
                              usage="\n%(prog)s build [OPTIONS] PATH | URL | -",
                              description=textwrap.dedent('''\
        Build an image from a Dockerfile
         '''))
        build.add_argument('path',
                           type=str,
                           metavar="PATH",
                           help="Build an image from a Dockerfile")
        build.add_argument('--tag', '-t',
                           type=str,
                           dest="tag",
                           help="Name and optionally a tag in the 'name:tag' format")
        build.add_argument('--rm',
                           action="store_true",
                           default=True,
                           help="Remove intermediate containers after a successful build (default true)")

        # ---------------------------RUN------------------------------

        run = sp.add_parser('run')
        run.add_argument('image',
                         type=str,
                         metavar="IMAGE",
                         help="Image to run")
        run.add_argument('command',
                         type=str,
                         metavar="COMMAND",
                         nargs="*",
                         help="Commands to run")
        run.add_argument('--detach', '-d',
                         action="store_true",
                         dest="detach",
                         help="Run container in background and print container ID")
        run.add_argument('--publish', '-p',
                         action="append",
                         type=str,
                         metavar="PORT[:PORT]",
                         dest="port_bindings",
                         help="Specify ports")
        run.add_argument('--interactive', '-i',
                         action="store_true",
                         dest="stdin_open",
                         default=True,
                         help="Keep STDIN open even if not attached")
        run.add_argument('--tty', '-t',
                         action="store_true",
                         dest="tty",
                         help="Allocate a pseudo-TTY")
        run.add_argument('--volume', '-v',
                         action="append",
                         type=str,
                         dest="binds",
                         help=textwrap.dedent('''\
        Bind mount a volume (default []). The format
        is [host-src:]container-dest[:<options>].
        The comma-delimited options are [rw|ro],
        [z|Z], [[r]shared|[r]slave|[r]private], and
        [nocopy]. The 'host-src' is an absolute path
        or a name value.
        '''))
        run.add_argument('--rm',
                         action="store_true",
                         help="Automatically remove the container when it exits")

        # --------------------------LOGS------------------------------

        logs = sp.add_parser('logs')
        logs.add_argument('container',
                          type=str,
                          metavar="CONTAINER",
                          help="Fetch the logs of a container")

        # --------------------------STATS-----------------------------

        stats = sp.add_parser('stats')
        stats.add_argument('containers',
                           type=str,
                           metavar="CONTAINER",
                           nargs="+",
                           help="Display a live stream of container(s) resource usage statistics")
        """
        stats.add_argument('--all', '-a',
                           action="store_true",
                           default=False,
                           help="Show all containers (default shows just running)")
        """
        stats.add_argument('--no-stream',
                           action="store_true",
                           dest="stream",
                           default=True,
                           help="Disable streaming stats and only pull the first result")

        # -------------------------RENAME-----------------------------

        rename = sp.add_parser('rename',
                               formatter_class=argparse.RawDescriptionHelpFormatter,
                               usage="\n%(prog)s rename CONTAINER NEW_NAME",
                               description=textwrap.dedent('''\
        Rename a container
         '''))
        rename.add_argument('container',
                            type=str,
                            metavar="CONTAINER",
                            help="Rename a container")
        rename.add_argument('name',
                            type=str,
                            metavar="NAME",
                            help="Rename a container")

        # -------------------------RESTART----------------------------

        restart = sp.add_parser('restart')
        restart.add_argument('containers',
                             type=str,
                             metavar="CONTAINER",
                             nargs="+",
                             help="Restart one or more containers")
        restart.add_argument('--time', '-t',
                             type=int,
                             metavar='int',
                             dest="timeout",
                             default=10,
                             help="Seconds to wait for stop before killing the container (default 10)")

        # --------------------------EXEC------------------------------

        exec_d = sp.add_parser('exec')
        exec_d.add_argument('container',
                            type=str,
                            metavar="CONTAINER",
                            help="Target container where exec instance will be created")
        exec_d.add_argument('cmd',
                            type=str,
                            metavar="COMMAND",
                            nargs="+",
                            help="Command to be executed")
        exec_d.add_argument('--detach', '-d',
                            action="store_true",
                            dest="detach",
                            help="Detached mode: run command in the background")
        exec_d.add_argument('--interactive', '-i',
                            action="store_true",
                            dest="stdin_open",
                            default=True,
                            help="Keep STDIN open even if not attached")
        exec_d.add_argument('--tty', '-t',
                            action="store_true",
                            dest="tty",
                            help="Allocate a pseudo-TTY")

        # ---------------------------RMI------------------------------

        rmi = sp.add_parser('rmi')
        rmi.add_argument('images',
                         type=str,
                         metavar="IMAGE",
                         nargs="+",
                         help="Remove one or more images")
        rmi.add_argument('--force', '-f',
                         action="store_true",
                         dest="force",
                         help="Force removal of the image")

        # ---------------------------RM-------------------------------

        rm = sp.add_parser('rm')
        rm.add_argument('containers',
                        type=str,
                        metavar="CONTAINER",
                        nargs="+",
                        help="Remove one or more containers")
        rm.add_argument('--force', '-f',
                        action="store_true",
                        dest="force",
                        help="Force the removal of a running container (uses SIGKILL)")

        # ---------------------------PS-------------------------------

        ps = sp.add_parser('ps')
        ps.add_argument('--all', '-a',
                        action="store_true",
                        dest="all",
                        help="Show all containers (default shows just running)")
        ps.add_argument('--filter', '-f',
                        type=dict,
                        dest="filters",
                        help="Filter output based on conditions provided (default [])")
        ps.add_argument('--format',
                        type=str,
                        help="Pretty-print containers using a Python template")
        ps.add_argument('--quiet', '-q',
                        action="store_true",
                        help="Only display numeric IDs")

        # -------------------------TOP--------------------------------

        top = sp.add_parser('top',
                            formatter_class=argparse.RawDescriptionHelpFormatter,
                            usage="\n%(prog)s CONTAINER [ps OPTIONS]",
                            description=textwrap.dedent('''\
        Display the running processes of a container
         '''))
        top.add_argument('container',
                         type=str,
                         metavar="CONTAINER",
                         help="Display the running processes of a container")
        top.add_argument('ps_args',
                         type=str,
                         nargs="?",
                         help="Display the running processes of a container")

        # ------------------------HISTORY-----------------------------

        history = sp.add_parser('history')
        history.add_argument('image',
                             type=str,
                             metavar="IMAGE",
                             help="The image to show history for")

        # --------------------------CP--------------------------------

        cp = sp.add_parser('cp',
                           formatter_class=argparse.RawDescriptionHelpFormatter,
                           usage="\n%(prog)s [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-\ndocker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH",
                           description=textwrap.dedent('''\
        Copy files/folders between a container and the local filesystem

        Use '-' as the source to read a tar archive from stdin
        and extract it to a directory destination in a container.
        Use '-' as the destination to stream a tar archive of a
        container source to stdout.
         '''))
        cp.add_argument('src',
                        type=str,
                        metavar="CONTAINER:SRC_PATH")
        cp.add_argument('dest',
                        type=str,
                        metavar="DEST_PATH")

        # ------------------------NETWORK-----------------------------

        network_p = sp.add_parser('network')
        network = network_p.add_subparsers(
            title="Networks", dest="network_flag", help='type [COMMAND] --help to get additional help')

        # -----------------------NETWORK-LS---------------------------

        network_ls = network.add_parser('ls')
        network_ls.add_argument('--format',
                                type=str,
                                help="Pretty-print networks using a Python template")

        # ---------------------NETWORK-CREATE--------------------------

        network_create = network.add_parser('create')
        network_create.add_argument('name',
                                    type=str,
                                    metavar="NETWORK",
                                    help="Create a network")
        network_create.add_argument('--driver', '-d',
                                    type=str,
                                    dest="driver",
                                    default="bridge",
                                    help="Driver to manage the Network (default \"bridge\")")
        network_create.add_argument('--gateway',
                                    type=str,
                                    dest="gateway",
                                    help="Custom IP address for the pool's gateway.")
        network_create.add_argument('--subnet',
                                    type=str,
                                    dest="subnet",
                                    help="Custom subnet for this IPAM pool using the CIDR notation. Defaults to None.")

        # -----------------------NETWORK-RM----------------------------

        network_rm = network.add_parser(
            'rm', formatter_class=argparse.RawDescriptionHelpFormatter,
            description=textwrap.dedent('''\
        Remove one or more networks

        Aliases:
            rm, remove
        '''))
        network_rm.add_argument('networks',
                                type=str,
                                metavar="NETWORK",
                                nargs="+",
                                help="Remove one or more networks")

        network_remove = network.add_parser(
            'remove', formatter_class=argparse.RawDescriptionHelpFormatter,
            description=textwrap.dedent('''\
            Remove one or more networks

            Aliases:
              rm, remove
            '''))

        network_remove.add_argument('networks',
                                    type=str,
                                    metavar="NETWORK",
                                    nargs="+",
                                    help="Remove one or more networks")

        # -----------------------NETWORK-INSPECT-----------------------

        network_inspect = network.add_parser(
            'inspect', formatter_class=argparse.RawDescriptionHelpFormatter,
            description=textwrap.dedent('''\
            Display detailed information on one or more networks
            '''))
        network_inspect.add_argument('networks',
                                     type=str,
                                     metavar="NETWORK",
                                     nargs="+",
                                     help="Display detailed information on one or more networks")

        # ---------------------------END------------------------------

        argcomplete.autocomplete(p)
        arguments = p.parse_args()
        arguments = vars(arguments)

        if arguments["console"]:
            enter_shell(dokcer)
        else:
            dokcer.set_verbose(arguments["verbosity"])
            if arguments["color"]:
                dokcer.set_color()
            if arguments["debug"]:
                dokcer.set_debug()
            if arguments["dry"]:
                dokcer.set_dry()

        dokcer.eval(arguments)

        if dokcer.debug:
            print repr(arguments)
    except (KeyboardInterrupt, SystemExit):
        pass
    except (AttributeError, ValueError) as e:
        if dokcer.color:
            logger.Logger.logError("Error response from dokcer: {}", str(e))
        else:
            logger.Logger.log("Error response from dokcer: {}", str(e))
        exit(1)
    except APIError as e:
        try:
            msg = e.response.json()["message"]
        except ValueError:
            msg = str(e.response.text[:-1])
        if dokcer.color:
            logger.Logger.logError("Error response from daemon: {}", msg)
        else:
            logger.Logger.log("Error response from daemon: {}", msg)
        exit(1)
